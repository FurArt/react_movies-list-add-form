{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","onBlur","touched","useState","Math","random","toFixed","slice","id","hasError","htmlFor","type","classNames","event","target","NewMovie","onAdd","count","formData","setFormData","setTouched","handleTextFieldChange","onClick","disabled","App","moviesFromServer","moviesFromServerWithNew","setMoviesFromServerWithNew","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de60ab71.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string;\n  value: string;\n  label?: string;\n  placeholder?: string;\n  required?: boolean;\n  onChange?: (newValue: string) => void;\n  onBlur?: () => void;\n  touched: boolean;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  onBlur = () => {},\n  touched,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => {\n            onChange(event.target.value);\n          }}\n          onBlur={() => {\n            onBlur();\n          }}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count] = useState(0);\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const [touched, setTouched] = useState({\n    title: false,\n    description: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  });\n\n  const handleTextFieldChange = (name: string, value: string) => {\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const reset = () => {\n    setFormData({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n\n    // Скинути статус touched до false для всіх полів\n    setTouched({\n      title: false,\n      description: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    });\n  };\n\n  const handleAddClick = () => {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = formData;\n\n    if (title && description && imgUrl && imdbUrl && imdbId) {\n      onAdd(formData);\n      reset();\n    }\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={formData.title}\n        touched={touched.title}\n        onChange={(value) => handleTextFieldChange('title', value)}\n        onBlur={() => setTouched({ ...touched, title: true })}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={formData.description}\n        touched={touched.description}\n        onChange={\n          (value) => handleTextFieldChange('description', value)\n        }\n        onBlur={() => setTouched({ ...touched, description: true })}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={formData.imgUrl}\n        touched={touched.imgUrl}\n        onChange={\n          (value) => handleTextFieldChange('imgUrl', value)\n        }\n        onBlur={() => setTouched({ ...touched, imgUrl: true })}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={formData.imdbUrl}\n        touched={touched.imdbUrl}\n        onChange={\n          (value) => handleTextFieldChange('imdbUrl', value)\n        }\n        onBlur={() => setTouched({ ...touched, imdbUrl: true })}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={formData.imdbId}\n        touched={touched.imdbId}\n        onChange={\n          (value) => handleTextFieldChange('imdbId', value)\n        }\n        onBlur={() => setTouched({ ...touched, imdbId: true })}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={handleAddClick}\n            disabled={\n              !formData.title\n              || !formData.imgUrl\n              || !formData.imdbUrl\n              || !formData.imdbId\n            }\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [\n    moviesFromServerWithNew,\n    setMoviesFromServerWithNew,\n  ] = useState(moviesFromServer);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesFromServerWithNew} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie) => {\n          setMoviesFromServerWithNew([\n            ...moviesFromServerWithNew,\n            movie]);\n        }}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}